library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
03_Getting_Data_Project
detach("package:datasets", unload=TRUE)
detach("package:graphics", unload=TRUE)
detach("package:grDevices", unload=TRUE)
detach("package:methods", unload=TRUE)
detach("package:stats", unload=TRUE)
detach("package:utils", unload=TRUE)
source("03_1_Import_Files.R")
myWD <- "~/Documents/Coursera/03-Getting_and_Cleaning_Data/Projects"
library("utils", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
myWD <- "~/Documents/Coursera/03-Getting_and_Cleaning_Data/Projects"
install.packages(c("boot", "class", "cluster", "codetools", "jsonlite", "KernSmooth", "MASS", "mgcv", "nlme"))
activityData <- read.csv(unz("activity.zip", "activity.csv"))
myWD <- ("~/Documents/Coursera/05-ReproducableResearch/05_RepData_PeerAssessment1")
setwd(myWD)
activityData <- read.csv(unz("activity.zip", "activity.csv"))
raw <- read.csv("./activity.csv", stringsAsFactors = FALSE)
library(lubridate)
class(raw$interval) <- "character"
interval2time <- function(val) {
if (nchar(val) < 2) { # for hour 0
val <- paste0("00:0",val) }
else if (nchar(val) < 3) {  # for hour 0  and minutes > 5
val <- paste0("00:", val) }
else if (nchar(val) < 4) { # for hours 1 to 9
val <- paste0("0", substr(val,1,1),":",substr(val,2,3)) }
else {val <- paste0(substr(val,1,2),":",substr(val,3,4)) }  # for hours 10 to 23
}
raw$time <- sapply(raw$interval,interval2time)
charDT <- paste(raw$date, raw$time)
DateTime <- ymd_hm(charDT)
data <- cbind(raw, DateTime)
aveStepsPerInterval <- aggregate(steps ~ time, data = data, FUN = mean)
aveStepsPerInterval <- cbind(t = 1:288,aveStepsPerInterval)
plot(aveStepsPerInterval$time, aveStepsPerInterval$steps, type = 'l',
main = "Average of Steps Per Interval",
col = "black",  xaxt = 'n', #pch = 19,
xlab = "Start Time of 5-Minute Interval",
ylab = "Average of Steps")
View(aveStepsPerInterval)
View(aveStepsPerInterval)
interval2time <- function(val) {
if (nchar(val) < 2) { # for hour 0
val <- paste0("000",val) }
else if (nchar(val) < 3) {  # for hour 0  and minutes > 5
val <- paste0("00", val) }
else if (nchar(val) < 4) { # for hours 1 to 9
val <- paste0("0", substr(val,1,1),substr(val,2,3)) }
else {val <- paste0(substr(val,1,2),substr(val,3,4)) }  # for hours 10 to 23
}
raw$time <- sapply(raw$interval,interval2time)
charDT <- paste(raw$date, raw$time)
DateTime <- ymd_hm(charDT)
data <- cbind(raw, DateTime)
View(data)
View(data)
aveStepsPerInterval <- aggregate(steps ~ time, data = data, FUN = mean)
View(aveStepsPerInterval)
plot(aveStepsPerInterval$time, aveStepsPerInterval$steps, type = 'l',
main = "Average of Steps Per Interval",
col = "black",  xaxt = 'n', #pch = 19,
xlab = "Start Time of 5-Minute Interval",
ylab = "Average of Steps")
plot(aveStepsPerInterval$time, aveStepsPerInterval$steps, type = 'l',
main = "Average of Steps Per Interval",
col = "black",  #xaxt = 'n', #pch = 19,
xlab = "Start Time of 5-Minute Interval",
ylab = "Average of Steps")
maxASPI <- max(aveStepsPerInterval$steps)
maxInt <- aveStepsPerInterval[aveStepsPerInterval$steps == maxASPI,]
maxTime <- maxInt[,1]
maxSteps <- round(maxInt[,3],1)
View(maxInt)
View(maxInt)
maxSteps <- round(maxInt[,2],1)
maxSteps <- round(maxInt[,2],0)
abline(v = maxTime)
abline(v = maxTime, col = "red")
lambda <- 0.2
n <- 40
iter <- rexp(n, lambda)
sim1 <- rexp(n, lambda)
mean1 <- mean(sim1)
hist(sim1)
sim2 <- numeric()
for (s in 1:1000) {
sim1 <- rexp(n, lambda)
mean1 <- mean(sim1)
sim2 <- c(sim2, mean1)
}
hist(sim2)
sim2 <- numeric()
for (s in 1:10000) {
sim1 <- rexp(n, lambda)
mean1 <- mean(sim1)
sim2 <- c(sim2, mean1)
}
hist(sim2)
mean(sim2)
hist(sim1, breaks = 10)
abline(v=mean1)
abline(v=mean1, col = "red")
par(mfrow = 2, mfcol = 2)
par(mfrow = c(2,2)
for (i in 1:4) {
sim1 <- rexp(n, lambda)
mean1 <- mean(sim1)
hist(sim1, breaks = 10)
abline(v=mean1, col = "red")}
par(mfrow = c(2,2)
for (i in 1:4) {
par(mfrow = c(2,2))
for (i in 1:4) {
sim1 <- rexp(n, lambda)
mean1 <- mean(sim1)
hist(sim1, breaks = 10)
abline(v=mean1, col = "red")
}
sim3 <- c(10,100,1000,10000)
par(mfrow(c(2,2)))
par(mfrow =c(2,2))
sim3 <- c(10,100,1000,10000)
for (s in sim3) {
for (t in 1:s) {
sim2 <- numeric()
sim_t <- rexp(n, lambda)
mean_t <- mean(sim_t)
sim2 <- c(sim2, mean_t)
}
mean2 <- mean(sim2)
hist(sim2, breaks = 10)
abline(mean2, col = "red")
}
par(mfrow =c(2,2))
sim3 <- c(10,100,1000,10000)
for (s in sim3) {
for (t in 1:s) {
sim2 <- numeric()
sim_t <- rexp(n, lambda)
mean_t <- mean(sim_t)
sim2 <- c(sim2, mean_t)
}
mean2 <- mean(sim2)
hist(sim2, breaks = 10)
abline(v=mean2, col="red")
}
par(mfrow =c(2,2))
sim3 <- c(10,100,1000,10000)
for (s in sim3) {
sim2 <- numeric()
for (t in 1:s) {
sim_t <- rexp(n, lambda)
mean_t <- mean(sim_t)
sim2 <- c(sim2, mean_t)
}
mean2 <- mean(sim2)
hist(sim2, breaks = 10)
abline(v=mean2, col="red")
}
for (s in sim3) {
sim2 <- numeric()
for (t in 1:s) {
sim_t <- rexp(n, lambda)
mean_t <- mean(sim_t)
sim2 <- c(sim2, mean_t)
}
mean2 <- mean(sim2)
var2 <- var(x = sim2)
sd2 <- sd(sim2)
hist(sim2, breaks = 10)
# add titling for which iteration
abline(v=mean2, col="red")
abline(v=mean2 + sd2, col="blue")
abline(v=mean2 - sd2, col="blue")
}
par(mfrow =c(2,2))
sim3 <- c(10,100,10000,100000)
for (s in sim3) {
sim2 <- numeric()
for (t in 1:s) {
sim_t <- rexp(n, lambda)
mean_t <- mean(sim_t)
sim2 <- c(sim2, mean_t)
}
mean2 <- mean(sim2)
var2 <- var(x = sim2)
sd2 <- sd(sim2)
hist(sim2, breaks = 10)
# add titling for which iteration
abline(v=mean2, col="red")
abline(v=mean2 + sd2, col="blue")
abline(v=mean2 - sd2, col="blue")
}
sim3table <- as.matrix()
sim3table <- matrix()
View(sim3table)
sim3table <- matrix(0,3)
sim3vec <- c(mean2, sd2, var2)
sqrt(var2)
sim3table <- rbind(sim3table, sim3vec)
View(sim3table)
View(sim3table)
View(sim3table)
sim3table <- matrix(3,0)
rm(sim3table)
sim3table <- matrix(3,0)
sim3table <- matrix(0,3)
View(sim3table)
View(sim3table)
rm(sim3table)
sim3table <- matrix(nrow = 0, ncol = 3)
sim3table <- rbind(sim3table, sim3vec)
}
sim3table <- rbind(sim3table, sim3vec)
View(sim3table)
View(sim3table)
sim3table <- matrix(nrow = 0, ncol = 3)
par(mfrow =c(2,2))
sim3 <- c(10,100,10000,100000)
sim3table <- matrix(nrow = 0, ncol = 3)
for (s in sim3) {
sim2 <- numeric()
for (t in 1:s) {
sim_t <- rexp(n, lambda)
mean_t <- mean(sim_t)
sim2 <- c(sim2, mean_t)
}
mean2 <- mean(sim2)
var2 <- var(x = sim2)
sd2 <- sd(sim2)
hist(sim2, breaks = 10)
# add titling for which iteration
abline(v=mean2, col="red")
abline(v=mean2 + sd2, col="blue")
abline(v=mean2 - sd2, col="blue")
sim3vec <- c(mean2, sd2, var2)
sim3table <- rbind(sim3table, sim3vec)
}
View(sim3table)
View(sim3table)
mywd <-"~/Documents/Coursera/05-ReproducableResearch/05_RepData_PeerAssessment1"
setwd(mywd)
raw <- read.csv("./activity.csv", stringsAsFactors = FALSE)
summary(raw)
raw <- read.csv("./activity1.csv", stringsAsFactors = FALSE)
summary(raw)
mywd <-"~/Documents/Coursera/05-ReproducableResearch/05_RepData_PeerAssessment1"
setwd(mywd)
if (!file.exists('~/activity.zip')) {  # this will be in place if you fork the repo
# this will be run if you need the program to source from teh class library.
file_URL <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(file_URL, "./activity.zip", method = "curl" )
}
if (!file.exists('./activity.zip')) {  # this will be in place if you fork the repo
# this will be run if you need the program to source from teh class library.
file_URL <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
print(oops!)
#download.file(file_URL, "./activity.zip", method = "curl" )
}
if (!file.exists('./activity.zip')) {  # this will be in place if you fork the repo
# this will be run if you need the program to source from teh class library.
file_URL <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
print("oops!")
#download.file(file_URL, "./activity.zip", method = "curl" )
}
remove(file_URL)
if (!file.exists('./activity.zip')) {  # this will be in place if you fork the repo
# this will be run if you need the program to source from teh class library.
file_URL <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
print("oops!")
#download.file(file_URL, "./activity.zip", method = "curl" )
}
return("oops!")
if (!file.exists('./activity.zip')) {  # this will be in place if you fork the repo
# this will be run if you need the program to source from teh class library.
file_URL <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
return("oops!")
#download.file(file_URL, "./activity.zip", method = "curl" )
}
if (!file.exists('./1activity.zip')) {  # this will be in place if you fork the repo
# this will be run if you need the program to source from teh class library.
file_URL <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
return("oops!")
#download.file(file_URL, "./activity.zip", method = "curl" )
}
if (!file.exists('./activity.zip')) {  # this will be in place if you fork the repo
# this will be run if you need the program to source from teh class library.
file_URL <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
#download.file(file_URL, "./activity.zip", method = "curl" )
}
if (!file.exists('./activity.zip')) {  # this will be in place if you fork the repo
# this will be run if you need the program to source from teh class library.
file_URL <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(file_URL, "./activity.zip", method = "cul" )
}
remove(file_URL)
if (!file.exists('./activity.zip')) {  # this will be in place if you fork the repo
# this will be run if you need the program to source from teh class library.
file_URL <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(file_URL, "./activity.zip", method = "cul" )
}
if (!file.exists('./1activity.zip')) {  # this will be in place if you fork the repo
# this will be run if you need the program to source from teh class library.
file_URL <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(file_URL, "./activity.zip", method = "cul" )
}
unzip_date <- date()
raw <- read.csv("./activity.csv", stringsAsFactors = FALSE)
summary(raw)
raw_summary <- summary(raw)
str(raw)
rawStructures <- str(raw)
raw_summary
View(raw)
raw$charInterval <- sapply(raw$interval, as.character)
View(raw)
interval2time <- function(val) {
if (nchar(val) < 2) { # for hour 0
val <- paste0("000",val) }
else if (nchar(val) < 3) {  # for hour 0  and minutes > 5
val <- paste0("00", val) }
else if (nchar(val) < 4) { # for hours 1 to 9
val <- paste0("0", substr(val,1,1),substr(val,2,3)) }
else {val <- paste0(substr(val,1,2),substr(val,3,4)) }  # for hours 10 to 23
}
raw$time <- sapply(raw$charInterval,interval2time)
View(raw)
charDT <- paste(raw$date, raw$time)
DateTime <- ymd_hm(charDT)
library(lubridate)
DateTime <- ymd_hm(charDT)
data <- cbind(raw, DateTime)
View(data)
raw_summary
summary(data)
data$week_end <- sapply(data$DateTime, weekdays)
View(data)
View(data)
wday(DateTime)
data$dow <- sapply(data$DateTime, wday)
View(data)
startMonday <- function(val) {
ifelse(wday(val)==1, 7, wday(val)-1)
}
startMonday(1/1/2014)
wday(1/1/2014)
wday("1/1/2014")
startMonday("1/1/2014")
startMonday("1/1/2015")
wday("1/1/2015")
wday("1/2/2015")
wday("01/02/2015")
startMonday("01/02/2015")
View(raw)
raw$dateTime <- ymd_hm(charDT)  # create our final Date/Time field as POSIXt
View(raw)
raw_summary
summary(raw)
str(raw)
dow <- weekday(raw$date)
dow <- weekdays(raw$date)
dow <- weekdays(as.date(raw$date)
)
dow <- weekdays(as.Date(raw$date))
dowID <- wday(as.Date(raw$date))
dowIDMon <- ifelse(wday(dowID)==1,6,wday(dowID)-2)
WeekDays <- ifelse(dowIDMon < 5, "Weekday", "Weekend")
data <- cbind(raw, dow, dowID, dowIDMon, WeekDays)
View(data)
View(data)
summary(data)
str(data)
